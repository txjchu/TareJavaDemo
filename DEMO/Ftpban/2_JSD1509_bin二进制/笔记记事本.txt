1.什么是二进制
	2进制:是一种逢2进1  的计数规则！
	特点：只有数字0   1
	权：每个位表示1的个数：128  64  32  16  8  4  2  1
	权是进制的整数幂

2.为什么要用2进制
	便宜：成本最优
	任何的数字计算机的内部只有2进制！

3.2进制相关的用法
10进制 与 2 进制的转换（用于计数！）
累计表示1个数
2367（10）=2*1000+3*100+6*10+7
	  =2367（10）
101001（2）=1*32 + 1*8 +1
	   =41（10）
1101010（2）=1*128 + 1*64 + 1*16 + 1*4
	    =212（10）

234（10）=



八进制：2进制的3位缩写，使用并不方便。

十六进制

8421

0001
0010
0100
1000

0100 0001(2) = 41(16) = 4*16 + 1 =65(10)

1100 0001(2) = c1(16) = 12*16 + 1 = 193（10）


4位2进制+补码
 （2）   （16）   （10）
0000       0        0
0001       1        1
0010       2        2
0011       3        3
0100       4        4
0101       5        5
0110       6        6
0111       7        7
1111       8        8
0001 0000		    ===8为什么不应该如此写？
0001 0001  9        9
0001 0010  a       10
0001 0011  b       11
0001 0100  c       12
0001 0101  d       13
0001 0111  e       14
0001 1000  f       15


max = 01111111 11111111 11111111 11111111
      7   f    f   f    f   f    f   f 
max = 0x7fffffff


2.2进制的运算
   --取反运算：1->0  0->1
& 与   | 或
>>>右移位   >>右移位   <<<左移位


>>>右移位：数字按照2进制，向右移动，高位补0。不论正负数高位总是补0

        690739179   
i     = 00101001 00101011 11010111 11101011
           2   9    2   b    d   7    e   b
i>>>1 = 000101001 00101011 11010111 1110101(1舍弃)


>>右移位：数字按照2进制，向右移动，正数高位补0，负数高数补1.



<<左移位：
i     =00101001 00101011 11010111 11101011
i<<1  =0101001 00101011 11010111 111010110

移位运算的数学意义：
回忆：10进制的移动小数点运算
   102102.   小数点向右移动一位
  1021020.   结果是原数字*10  //右移动小数点一次 n*10
假如小数点位置不变，可以看做数字向左移动。
数字向左移动一次，结果原数字 n*10

      2进制的时候，数字向左移动一次，原数字 n*2
i    =  00000000 00000000 00000000 00001011.    10（10）    ====00001010???
i<<1 = 00000000 00000000 00000000 000010100.    20（10）
i<<2 =00000000 00000000 00000000 0000101000.    40（10）

i = 100;
j = i>>2;
System.out.println(j);//输出25

i=5用最快速的方法实现 i*8
答案：i<<3

i=-40；
j=i>>>2；
System.out.println(j);  //没有数学意义
j=i>>2；//  j= i/2/2;
System.out.println(j);  //-10  有数学意义

//  >>> i为【负数】时候运算结果没有数学意义！
//  >>>又称为逻辑右移运算（没有数学意义）；
//  >>称为数学右移运算（结果有数学意义的）；


& 与运算：逻辑乘法（接近与乘法）按位计算；
  0 & 0 = 0
  0 & 1 = 0
  1 & 0 = 0
  1 & 1 = 1

  i = 00010010 11101110 11011111 11011010
  j = 00000000 00000000 00000000 11111111
&----------------------------------------
  k = 00000000 00000000 00000000 11011010 
如上运算结果的意义是：k 是 i 的最后8位数！

颜色分量：
rad:169
green:198;
blue:236;

颜色数值： HEX：A9C6EC
题目：从颜色数值A9C6EC中拆取颜色分量blue
答案：
	int color = 0xA9C6EC;
	int blue = color & 0xff;   //  【&必须是0xff】
	println(blue);       //236

| 运算的规则：逻辑+法
0 | 0 = 0
0 | 1 = 1
1 | 0 = 1
1 | 1 = 1			

将4个 byte 合并为一个 int

   i = 00000000 000000000 000000000 10110101
   j = 00000000 000000000 101001010 00000000
|-------------------------------------------
       00000000 000000000 101001010 10110101    

拼接为 RGB 格式颜色color
	color = (red<<16) | (green<<8) | blue

	j=(b4<<24) | (b3<<16) | (b2<<8) | b1;
	System.out.println(
		Integer.toHexString(j));


字符的编码问题



