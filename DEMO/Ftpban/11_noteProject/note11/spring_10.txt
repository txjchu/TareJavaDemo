=====Spring AOP======
1.AOP简介
 Aspect Oriented Programming 面向切面编程

 本质：将共通处理逻辑和原有传统业务处理逻辑剥离，剥离后独立封装成组件，
        之后通过配置低耦合形式切入到原有传统业务组件中。
        （将共通逻辑和传统逻辑进行解耦）

项目目标：对云笔记追加异常日志记录功能


2.AOP相关概念
 OOP : Object Oriented Programming 面向对象编程
         （封装、继承、多态、抽象）
 AOP : Aspect Oriented Programming面向切面编程
        （切面、切入点、通知、动态代理）

a.切面(Aspect) 哪些共通处理需要切入？ 
  共通剥离出来的处理逻辑,将来可以切入到其他目标组件方法上
共通：重复利用;使用时刻相同

b.切入点（Pointcut）往哪些组件切入？
  用于指定目标组件及其方法。在Spring中使用表达式表示
  
===方法限定表达式===
execution(修饰符？ 返回类型 方法名（参数列表） throws异常？)
//匹配UserServiceImpl的registUser方法
execution(* org.tarena.note.service.UserServiceImpl.registUser(..)) 
//匹配所有load字符开始方法
execution(* load*(..)）
//匹配所有service包下所有类所有方法
execution(* org.tarena.note.service.*.*(..))
//匹配所有service包及子包中所有类所有方法
execution(* org.tarena.note.service..*.*(..)) 
===类型限定表达式====
within(类型)
//匹配UserServiceImpl类型的所有方法
within(org.tarena.note.service.UserServiceImpl)
//匹配service包下所有类所有方法
within(org.tarena.note.service.*)
//匹配service包及子包所有类所有方法
within(org.tarena.note.service..*)
===Bean名称限定表达式====
bean(id名)
//匹配id=userServiceImpl组件对象所有方法
bean("userServiceImpl")
//匹配所有id名以Service结尾的组件对象所有方法
bean("*Service")

c.通知(Advice) 什么时候将共通切入目标？
  用于指定切面处理和目标组件方法作用的时机。
  Spring提供了以下5种类型通知
try{
  前置通知--》调用切面处理
  //执行目标方法
  后置通知--》调用切面处理
}catch(){
  异常通知--》调用切面处理
}finally{
  最终通知--》调用切面处理
}

环绕通知：前置+后置处理

事务控制：
  切面：事务提交、回滚逻辑 （编写切面组件DataSourceTransactionManager）
  切入点：所有Service组件方法  (配置expression切入点表达式)
  通知：目标方法执行正确就提交；异常就回滚（配置通知类型）




简单示例：为每个Controller打个桩信息，在execute方法执行前调用
切面：打印输出桩信息--》写切面组件
切入点：所有Controller--》within(org.tarena.note.controller..*)
通知：execute执行前--》前置通知

 d.动态代理（AutoProxy）
 Spring AOP是采用动态代理技术实现的。 
 动态代理：在程序运行期间，在内存中动态生成一个类，
   编译后自动载入类加载器。

 当使用Spring AOP后，Spring容器getBean返回的目标组件，
是Spring通过动态代理生成的一个新的类型。 
 这个新类型对象重写了原有目标组件的业务方法，在重写的方法中
 调用原目标组件方法和切面组件功能。

 Spring框架采用了2种动态代理技术
  --采用JDK java.reflect.Proxy API
     （默认目标组件有接口时采用）
    public class $Proxy21 implements 目标组件接口{}

  --采用CGLIB工具
     （默认目标组件没有接口时采用）
    public class 代理类 extends 目标组件{}

    public class A implements Serializable{
         public void f1(){}
         public void f2(){}
   }
  如果需要强制采用CGLIB方法生成代理类，方法如下：
  <aop:config proxy-target-class="true">...</aop:config>
  <tx:annotation-driven proxy-target-class="true"
	transaction-manager="txManager"/>

案例：记录异常日志
切面：抛出异常写入日志文件
切入点：所有Controller
通知：异常通知（切入点方法发生异常后调用切面处理）





