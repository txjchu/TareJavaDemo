1.注册Servlet访问路径
  1）精确(/名称)
    A.给Servlet取唯一的一个访问名，
      只能通过该访问名访问这个Servlet。
    B.特征：比较直观，但是比较麻烦。
    C.举例：
      查询员工：/findEmp
      新增员工：/addEmp
      删除员工：/deleteEmp
      查询部门：/findDept
      新增部门：/addDept
      删除部门：/deleteDept
  2）通配符(/*)
    A.任何请求都可以访问这个Servlet。
    B.特征：可以使用一个Servlet处理
      项目中的所有请求，从而达到简化
      Servlet注册的目的。
    C.举例
      ActionServlet -> /*
      所有的请求都交给ActionServlet处理。
  3）后缀(*.abc)
    A.带有“abc”后缀的请求才能访问此
      Servlet。
    B.特征：每一个模块单独使用一个
      Servlet处理其业务，用后缀区分模块。
    C.举例：
      员工模块(增删改查员工)
        EmpServlet -> *.emp
      部门模块(增删改查部门)
        DeptServlet -> *.dept
    D.注意
      此种方案也可以写一个Servlet
      处理所有请求，即将所有请求
      当做一个大模块。
      ActionServlet -> *.do
2.项目中的做法
  在项目中，为了减少web.xml的配置，通常
  使用一个Servlet处理所有的请求。
  1）参考SpringMVC框架的做法
    Servlet -> *.do
    即采用第3种方案(后缀)处理所有请求；
  2）参考Struts2框架的做法
    Filter(类似于Servlet) -> /*
    即采用第2种方案(通配符)处理所有请求；
  3）注意
    A.在这种方案下写Servlet，一个servlet
      处理全部请求，那么必须事先约定哪个
      功能对应哪个请求路径，然后此Servlet
      才能遵循这个约定处理业务。
    B.开发之前，必须完成这些约定(开发规范)
3.重构EmpManager(简化配置)
  1）目标：使用一个Servlet处理
     所有的请求。
  2）规范：
     A.所有的请求后缀都是.do；
     B.员工模块
       查询：findEmp.do
       保存：saveEmp.do
       删除：deleteEmp.do
     C.部门模块(假设)
       查询：findDept.do
       保存：saveDept.do
       删除：deleteDept.do
    







