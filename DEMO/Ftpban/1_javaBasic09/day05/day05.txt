回顾:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在循环过程中反复改变的那个量
3.循环结构:
  1)while:先判断后执行
          有可能一次都不执行
  2)do...while:先执行一次再判断
               至少执行一次
               第1要素与第3要素相同时首先
  3)for:应用率最高的


听也能听得懂，自己写不出来
------写得太少了(多练，多想)

逻辑思维能力还不够
欠练






正课:
1.三种循环结构的更佳适用情况
  1)while:"当..."循环
  2)do...while:"直到..."循环
                第1要素与第3要素相同时首选
  3)for:固定次数循环，应用率最高
2.嵌套循环:
  1)循环中套循环，外层控制行，内层控制列
  2)执行过程:外层循环走一次，内层循环走所有次
  3)能用一层就不用两层，能用两层就不用三层，嵌套循环层次越少越好
    若需求必须通过3层以上才能实现，说明设计有问题
  4)break只能跳出一层循环
3.程序=算法+数据结构
  算法:解决问题的流程/步骤(顺序、分支、循环)
  数据结构:将数据按照某种特定的方式来存储
           数怎么存
    设计良好的数据结构会导致好的算法
4.数组:
  1)相同数据类型元素的集合
  2)数组是一种数据类型(引用类型)
  3)数组的定义:
      int[] arr = new int[4];
  4)数组的初始化:
      int[] arr = new int[3]; //0,0,0
      int[] arr = {1,5,8}; //1,5,8
      int[] arr = new int[]{1,5,8}; //1,5,8
      int[] arr;
      arr = {1,5,8}; //编译错误
      arr = new int[]{1,5,8}; //正确
  5)数组的访问:
    5.1)数组名.length----获取数组的长度
          int[] arr = new int[3];
          System.out.println(arr.length); //3
    5.2)数组元素的访问是通过下标/索引来实现的
        数组的下标从0开始，最大到.length-1
	  int[] arr = new int[3];
	  arr[0] = 100;
	  arr[1] = 200;
	  arr[2] = 300;
	  arr[3] = 400; //数组下标越界异常
	  System.out.println(arr[0]); //输出arr中的第1个元素
	  System.out.println(arr[arr.length-1]); //输出arr中的最后一个元素
  6)数组的遍历:
      int[] arr = new int[10];
      for(int i=0;i<arr.length;i++){
        arr[i] = 100;
      }
      for(int i=0;i<arr.length;i++){
        System.out.println(arr[i]);
      }
      for(int i=arr.length-1;i>=0;i--){
        System.out.println(arr[i]);
      }
  7)数组的复制:
      System.arraycopy(a,1,a1,0,4);
      int[] a1 = Arrays.copyOf(a,6);
      a = Arrays.copyOf(a,a.length+1);
  8)数组的排序:
      Arrays.sort(arr);
      冒泡排序算法


经典案例






冒泡算法:
1)四个数冒三轮
2)每一轮都是从第1个元素开始比，
  每一次都是和它的下一个元素比
3)冒出来的就不带它玩了


for(int i=0;i<arr.length-1;i++){ //控制轮
  for(int j=0;j<arr.length-1-i;j++){ //控制每轮比的次数
    if(arr[j]>arr[j+1]){ //每次都和它的下一个比
      int t=arr[j];
      arr[j]=arr[j+1];
      arr[j+1]=t;
    }
  }
}





    arr.length-1-i
i=0 比3次
i=1 比2次
i=2 比1次


int[] arr = {85,34,1,26}; //升序排列
第一轮:
  85和34比，换，34,85,1,26
  85和1比， 换，34,1,85,26
  85和26比，换，34,1,26,85---85冒出来了
第二轮:
  34和1比， 换，1,34,26,85
  34和26比，换，1,26,34,85---34冒出来了
第三轮:
  1和26比，不换 1,26,34,85---26冒出来了


BubbleSort


设计良好的数据结构会导致好的算法

若数据类型不同，怎么排序

装在了100个不同的变量中
装到一个数组中，排序方便

若a>b则换，保证a<b
若a>c则换，保证a<c
若a>d则换，保证a<d
若b>c则换，保证b<c




long a = System.currentTimeMillis();
冒泡排序算法
long b = System.currentTimeMillis();

System.out.println(b-a); //排序所经历的毫秒数









随机生成100万个数据
  使用不同的排序方法来排序，看运行的时间
  最后得出一个结论，Arrays.sort()效率最高












不同的数据使用不同的排序算法，结果是不一样的

100万个数据------冒泡最快
100万个数据------快速最快
100万个数据------插入最快

以交换次数多少来衡量算法的优劣
交换次数越少，则效率越高












System.out.println("HelloWorld");
Math.random()

int[] arr = {10,20,30,40,50};
int[] arr1 = new int[6];


for(int i=0;i<arr.length;i++){
  arr1[i] = arr[i];
}


arr1[0] = arr[0];
arr1[1] = arr[1];
arr1[2] = arr[2];
arr1[3] = arr[3];
arr1[4] = arr[4];







int[] arr = {2,25,76,3};

算法一:找最大值
1)假设第一个数为最大值
  int max = arr[0];
2)遍历剩余元素，用剩余元素分别与max比，
  若大于max，则修改max为较大的值
  for(int i=1;i<arr.length;i++){
    if(arr[i]>max){
      max = arr[i]; 
    }
  }


max=2
  max=25
    max=76











ArrayDemo


char的默认值
0--------------正确的
'0'







int[] arr = new int[10];
System.out.println(arr[0]);
System.out.println(arr[1]);
System.out.println(arr[2]);
System.out.println(arr[3]);
System.out.println(arr[4]);
arr[0] = 100;
arr[1] = 100;
arr[2] = 100;
arr[3] = 100;
arr[4] = 100;
arr[5] = 100;
arr[6] = 100;
arr[7] = 100;
arr[8] = 100;
arr[9] = 100;











int[] arr = new int[3]; //0,0,0

arr[0]代表arr中的第1个元素
arr[1]代表arr中的第2个元素


int a=0;
int b=0;
int c=0;

b=100;







int[] arr = new int[4]; //0

double[] dou = new double[10]; //0.0
dou[5] = 5.5;

boolean[] bs = new boolean[20]; //false
bs[0] = true;







int   a = 5;

//声明int型数组a，包含4个元素
//每个元素都是int型，每个元素默认为0
int[] a = new int[4];






int   a; //声明int型变量，名为a
int[] a; //声明int型数组，名为a













将书籍按图书类别放-----java编程思想

将书籍按出版社存放-----java编程思想














将书按图书类别分类放置----数据结构








6000000000次
性能，运行的效率

软件是模拟现实生活的

那种需求几乎没有

保留字----不推荐使用

for(int i=0;i<1000;i++){
  for(int j=0;j<2000;j++){
    for(int k=0;k<3000;k++){
      break;
      System.out.println("aaa");
    }
  }
}



i=0
  j=0
    k=0/1/2/.../29
  j=1
    k=0/1/2/.../29
i=1
  j=0/1/2/.../19
i=3










int num = 9;
for(int i=1;i<=num;i++){
  System.out.print(i+"*"+num+"="+i*num+"\t");
}
System.out.println();

num = 8;
for(int i=1;i<=num;i++){
  System.out.print(i+"*"+num+"="+i*num+"\t");
}
System.out.println();

num = 7;
for(int i=1;i<=num;i++){
  System.out.print(i+"*"+num+"="+i*num+"\t");
}
System.out.println();
											










MuiltTable







