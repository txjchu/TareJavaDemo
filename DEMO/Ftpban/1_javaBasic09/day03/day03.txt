回顾:
1.变量:存数的，代词，指代那个数
    int a;
    int b,c;
    int a=250;
    int b;
    b=250;

    int a=5,b=10;
    int c=a+b;
    a = a + 100;
    System.out.println(c);
    System.out.println(m); //编译错误
    int m;
    System.out.println(m); //编译错误
    见名知意，驼峰命名法
2.基本数据类型
  1)int:4个字节 5,25,250
  2)long:8个字节 5L,25L,10000000000L
  3)double:8个字节 5.56,0.5,5.0
  4)boolean:1个字节 true,false
  5)char:2个字节 '女','a',' '
3.数据类型间的转换
    自动类型转，强制类型转
    System.out.println('2'+'2');
4.Scanner的用法
    import java.util.Scanner;
    Scanner scan = new Scanner(System.in);
    System.out.println("请输入年龄:");
    int age = scan.nextInt();
    System.out.println("请输入价格:");
    double price = scan.nextDouble();





笔记:
1.运算符:
  1)算术运算符:+-*/%,++,--
    1.1)%:取余/取模，余数为0即为整除
    1.2)++/--:自增1/自减1，可以写在变量前也可以写在变量后
	1.2.1)单独使用时，在前在后无差别
	1.2.2)被使用时，在前在后有差别
	        a++的值为a的值
	        ++a的值为a+1的值
  2)关系运算符:
    2.1)>(大于),<(小于)
        >=(大于或等于),<=(小于或等于)
        ==(等于),!=(不等于)
    2.2)关系运算的结果为boolean型
        关系成立则为true，关系不成立则为false
  3)逻辑运算符:
    3.1)&&:短路与(并且)，两边都为真则为真，见false则false
           当第1个数为false时，发生短路(后面的不执行了)
        ||:短路或(或者)，有一边为真则为真，见true则true
	   当第1个数为true时，发生短路(后面的不执行了)
	! :逻辑非(取反)，非真则假，非假则真
    3.2)逻辑运算是建立在关系运算的基础之上的
	逻辑运算的结果也是boolean型
  4)赋值运算符:
    4.1)简单赋值运算符:=
    4.2)扩展赋值运算符:+=,-=,*=,/=,%=
  5)字符串拼接运算符:
    5.1)+有两种用法:
        5.1.1)若两边为数字，则做加法运算
        5.1.2)若有一边为字符串，则做字符串拼接运算
  6)三目/条件运算符:最简单的if...else
    6.1)语法:
	  boolean?数1:数2
    6.2)执行过程:
	  计算boolean的值:
            若为true，则整个表达式的结果为数1
	    若为false，则整个表达式的结果为数2
2.分支结构
  1)if结构:1条路
  2)if...else结构:2条路
  3)if...else if结构:多条路
  4)switch...case结构:多条路
    优点:效率高、结构清晰
    缺点:整数、相等
    break:跳出switch


课后作业:
  第4题选做







int a=5,b=6;
int max = a>b?a:b;

if(a>b){
  max = a;
  ...
  ...
}else{
  max = b;
  ...
  ...
}










System.out.println(2+2);     //4
System.out.println('2'+'2'); //100
System.out.println("2"+"2"); //22










CommandBySwitch




用switch.case能实现的，用else if都可以实现----true
用else if能实现的，用switch...case都可以实现--false







if(num==1){
  111
}else if(num==2){
  222
}else if(num==3){
  333
}else{
  444
}





中文请按1，英文请按2
按了个1











A:成绩大于等于90
B:成绩大于等于80并且小于90
C:成绩大于等于60并且小于80
D:成绩小于60

Score


1)A,B,C,D，只有可能走其中之一
2)若没有最后的else，则A,B,C有可能一个也不走
3)若有最后的else，则A,B,C,D必走其中之一
同一个问题，解决办法并不是只一个



int score = 45;
if(score>=0 && score<=100){
  if(score>=90){
    A
  }else if(score>=80){
    B
  }else if(score>=60){
    C
  }else{
    D
  }
}else{
  成绩不合法
}






if(score>=90){
  A
}else{
  if(score>=80 && score<90){
    B
  }else{
    if(score>=60 && score<80){
      C
    }else{
      if(score<60){
        D
      }
    }
  }
}














有锅包肉吗?
  有，吃锅包肉
  没有，
    有糖醋里脊吗?
      有，吃糖醋里脊
      没有，
        有拔丝地瓜吗?
	  有，吃拔丝地瓜
	  没有，不吃了

几条路:
1.吃锅包肉
2.吃糖醋里脊
3.吃拔丝地瓜
4.不吃了

if(有锅包肉吗?){
  吃锅包肉
}else{
  
}



















不管多复杂的程序都可以通过三种结构来实现:
1)顺序结构:从上往下逐行执行，每句必走
2)分支结构:有条件的执行某语句，并非每句必走
3)循环结构:


满500打8折
满499减100元
满99免运费


if:满足时干事，不满足时不干事
if...else:满足时干一个事，不满足时干另一个事

totalPrice*=0.8;
相当于
totalPrice=totalPrice*0.8;



钱够:------找零并输出
钱不够:----给错误提示

if(money>=totalPrice){ //钱够
  
}else{ //钱不够
  
}






数量:

大米3块钱一斤
  半斤(0.5斤)---1.5


int
double--------








闰年的判断公式:
1.能被4整除并且不能被100整除
或者
2.能被400整除

2000是闰年
2004是闰年
2001不是闰年








(year%4==0 && year%100!=0) || year%400==0










平年:2月为28天
闰年:2月为29天







LeapYear





优先级
2+3*(5-8)/2

&&
||

age>=18
&&
age<=50



int a=3,b;
System.out.println(b=a); //3
System.out.println(b);   //3











                              true/false
我的年龄大于你的年龄----------对/错
我的身高等于你的身高----------对/错
我的体重小于或等于你的体重----对/错

!         false true
下雨了吗? true  false



能结账吗? true  true  true false
有现金吗? true  false true false
或者--||
有卡吗?   false true  true false



能毕业吗?      false false false true
成绩>=60吗?    true  false false true
并且--&&
出勤率>=80%吗? false true  false true










