回顾:
1.方法的签名:方法名+参数列表
2.方法的重载(overload):
  1)同一个类中，方法名相同，参数列表不同
  2)编译器在编译时会自动根据签名绑定调用的方法
3.构造方法:构造函数、构建器，构造器
  1)给成员变量初始化
  2)与类同名、没有返回值类型
  3)创建对象时被自动调用
  4)不写，默认无参构造，自己写了，不再默认提供
  5)重载
4.this:指代当前对象，哪个对象调指的就是哪个对象
       方法中访问成员变量之前，默认有个this.
  用法:
    this.成员变量名
    this.方法名()
    this()
5.引用类型数组
    Cell[] cells = new Cell[4];
    cells[0] = new Cell();

    int[][] arr = new int[3][];
    arr[0] = new int[2];

    int[][] arr = new int[3][4];
1.填空题
2.选择题
3.判断题
4.代码分析题
5.简答题
6.问答题
7.编码题
class O{
  Cell[] cells;
  O(){
    this(0,0);
  }
  O(int row,int col){
    cells = new Cell[4];
    cells[0] = new Cell(row,col);
    cells[1] = new Cell(row,col+1);
    cells[2] = new Cell(row+1,col);
    cells[3] = new Cell(row+1,col+1);
  }
  drop()/moveLeft()/moveRight()/print()
}



笔记:
1.内存管理:由JVM管理(理解为主)
  1)堆:
    1.1)存储new出来的对象(包括成员变量)
    1.2)成员变量的生命周期:
          new对象时存在，对象被回收时消失
    1.3)没有任何引用所指向的对象即为垃圾
        垃圾回收器(GC)不定时内存中，看到垃圾则自动回收
    1.4)垃圾回收的过程是透明的，不一定看到后马上就收，
        想快一些可以调用System.gc()
    1.5)内存泄露:不再使用的对象没有被及时的回收
        建议:不再使用的对象及时将引用设置为null
  2)栈:
    2.1)存储正在使用的局部变量
    2.2)调用方法时，在栈中为该方法分配一块对应的栈帧，
        栈帧中存储方法的局部变量(包括参数)，当方法调用结束时，
	栈帧被消除，局部变量一并消失
    2.3)局部变量的生命周期:
          方法被调用时存在，方法结束栈帧被消除时消失
  3)方法区:
    3.1)存储类的字节码文件(包括方法)
    3.2)方法只有一份，通过this来区分具体的对象
2.继承:
  1)意义:有利于代码的重用
  2)通过extends实现继承
  3)父类:所有子类共有的特征和行为
    子类:子类所特有的特征和行为
  4)继承后，子类具有:父类的+本类的
  5)一个子类只能继承一个父类
    一个父类可以有多个子类----单一继承
  6)继承具有传递性
  7)java规定:构造子类之前必须先构造父类
    若子类构造方法中没有调用父类的构造方法，
    则默认个super()调父类的无参构造，
    若子类构造方法中调了父类的，则不再默认提供
3.super:指代当前对象的父类对象
  用法:
    super.成员变量名---访问父类的成员变量
    super.方法名()-----调用父类的方法
    super()------------调用父类的构造方法
4.向上造型
  1)父类型的引用指向子类的对象
  2)能点出来什么，看引用的类型


任务:
1.演示向上造型
2.今天的案例重做一次








类中:
  对象所共有的特征/属性-----变量
  对象所共有的行为----------方法

class T{
  Cell[] cells; //对象的特征
  void drop(){} //对象的行为
  void moveLeft(){}
  void moveRight(){}
  
}

T型有下落，左移，右移的行为
T型有打墙+打图形的行为--------合理









Person p1 = new Student(); //向上造型
Person p2 = new Teacher();
Person p3 = new Doctor();



Tetromino o1 = new T(); //向上造型
Tetromino o2 = new J();
Tetromino o3 = new O();
Tetromino o4 = new I();

Tetromino类型可以认为是:
  T,J,O,I,L,S,Z的公共类型






//动物是动物
Animal o1 = new Animal();
//老虎是老虎
Tiger o2 = new Tiger();
//老虎是动物
Animal o3 = new Tiger(); //正确的


//动物是老虎----错误
Tiger o4 = new Animal(); //错误的


class Animal{
}
class Tiger extends Animal{
}














原因:
T型参数只能接收T型对象
J型参数只能接收J型对象
O型参数只能接收O型对象
解决:
  如果有一种类型，
    既能接收T型对象，
    也能接收J型对象，
    也能接收O型对象










何时打*:
  只要和4个格子之一配上，就打*

何时打-:
  和4个格子都没配上，则打-

并非一次判断就能得到结果-----开关






if(i==t.cells[0].row && j==t.cells[0].col
				   ||
				   i==t.cells[1].row && j==t.cells[1].col
				   ||
				   i==t.cells[2].row && j==t.cells[2].col
				   ||
				   i==t.cells[3].row && j==t.cells[3].col){
					System.out.print("* ");
				}else{
					System.out.print("- ");
				}








经典案例:
1.构造Tetromino类，T类和J类继承
2.打墙+打T型
3.打J型、打O型...(向上造型)


class Emp{
  String name;
  int age;
  double salary;
}

public static void print(String name,int age,double salary){
}
public static void print(Emp emp){
}










class A{
  int a;
  void show();
}
class B extends A{
  int b;
  void say();
}
class C extends B{
  int c;
  void sayHi();
}
C o = new C();
o.c/sayHi();
o.b/say();
o.a/show();
















代码不用自己写，自己也能用

Student zs = new Student();
zs.className/study(); //本类的
zs.name/age/address/eat()/sleep() //父类的

Teacher wkj = new Teacher();
wkj.salary/teach(); //本类的
wkj.name/age/address/eat()/sleep() //父类的


class Person{ //父类
  String name;
  int age;
  string address;
  void eat(){}
  void sleep(){}
}
class Student extends Person{ //子类
  String className;
  void study(){}
}
class Teacher extends Person{
  double salary;
  void teach(){}
}
class Doctor extends Person{
  String level;
  void cut(){}
}











代码不用自己写，自己也能用

生活中的继承:
1.继承财产:
    钱不用自己挣，自己也能花
2.继承皇位:
    江山不用自己打，自己也能坐
3.继承工作:
    工作不用自己找，自己也能干















class Aoo{
  int a;
  void show(int b){
    int c;
    System.out.println(a); //对的
    System.out.println(c); //错的
  }
}
















C++:
java:自动垃圾回收机制--垃圾回收器(GC)
















java程序，运行运行运行----内存不足
中关村买了一根内存条4G
4G--------电脑












