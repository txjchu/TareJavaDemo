1.视图


2）修改视图：
由于视图本身没有结构，只是对应了一条子查询，所以修改视图就是替换原有的子查询，所以修改视图就是替换原有的子查询。可以使用语句 CREATE OR REPLACE 创建修改都可以，没有则创建，有则替换修改。视图对应的子查询可以为字段添加别名，这样视图中该字段的名字则变为别名，若查询的字段含有表达式，函数，则该子段必须指定别名。
	视图的创建，如果存在就变成修改视图。
	CREATE OR REPLACE VIEW v_emp_10 
	AS SELECT empno id,ename name,sal salary,deptno 
	FROM emp_zyl WHERE deptno=10;

3）对视图进行DML操作：
只能对简单视图进行，对视图进行DML就是对该视图数据来源的基表进行的操作。
简单视图：
数据从单一的一张表中获取，并且没有对表中的数据进行过任何加工（字段中不含有表达式、函数、不含有分组等操作。）。

4）向视图插入一条数据，就是将数据插入到基表中，并且，该记录只有视图看的到的字段会有值，其他都是插入默认值NULL（单独指定默认值的除外）。
所以，若基表中视图看不到的字段含有NOT NULL 约束的话，那么插入会失败。
	INSERT INTO v_emp_10 VALUES (1001,'JACK',3000,10);

有时，我们通过视图插入的数据，视图本身看不到，但是却又插入到基表中了，那么这样的数据会对基表产生污染。
	INSERT INTO v_emp_10 VALUES(1002,'ROSE',4000,20);

5)为视图添加CHECK OPTION选项，当一个视图添加了检查选项后，那么对视图进行增、改操作后，若视图对数据不可见了，则不允许这样的操作。
	CREATE OR REPLACE VIEW v_emp_10 
	AS SELECT empno id,ename name,sal salary,deptno 
	FROM emp_zyl WHERE deptno=10 
	WITH CHECK OPTION;

6)将视图设置为只读的，那么该试图则不允许执行DML操作。
	CREATE OR REPLACE VIEW v_emp_10 
	AS SELECT empno id,ename name,sal salary,deptno 
	FROM emp_zyl WHERE deptno=10 
	WITH READ ONLY;

7)复杂视图
	CREATE VIEW v_emp_salary 
	AS SELECT d.dname,d.deptno,avg(e.sal) avg_sal,sum(e.sal) sum_sal,max(e.sal) 	max_sal,min(e.sal) min_sal
	FROM emp_zyl e JOIN dept d
	ON e.deptno=d.deptno
	GROUP BY d.dname,d,deptno;
	
	查看哪些员工比所在部门平均薪水高：
	SELECT e.ename,e.sal,s.dname FROM emp_zyl e,v_emp_salary s 
	WHERE e.deptno=s.deptno AND e.sal>s.avg_sal;

	CREATE VIEW v_emp_sal 
	AS SELECT e.empno,e.ename,e.job,e.sal*12 year_sal,d.dname,d.loc 
	FROM emp_zyl e,dept_zyl d WHERE e.deptno=d.deptno;  

8)删除视图
	DROP VIEW v_emp_10;

9）通过查询USER_VIEWS 数据字典获取相关信息
	USER_OBJECTS 
	USER_VIEWS 
	USER_UPDATABLE_COLUMNS 

	SELECT object_name FROM user_objects WHERE object_type = 'VIEW';
	SELECT text FROM user_views WHERE view_name = 'V_EMP_10';	
	SELECT table_name FROM user_tables;


2.序列
1）用于生成一组数字的数据库对象，通常为某张表的主键字段提供值。

	创建一个序列  seq_emp_empno
	CREATE SEQUENCE seq_emp_empno START WITH 100 INCREMENT BY 10;

2)序列的2个伪列
NEXTVAL:获取序列下一个值		CURRVAL：获取序列最后一次生成的值

NEXTVAL在新创建的序列中使用会首先获取START WITH 指定的值，以后则是用最后一次生成的数字加上步长得到，序列不可以后退，所以当调用了NEXTVAL后就无法得到之前生成的数字了。
CURRVAL可以获取最后生成的数字，无论调用多少次值都是一样的，除非调用过NEXTVAL生成下一个数字。需要注意：刚创建的序列必须先执行一次NEXTVAL 后才可以使用 CURRVAL。
	
	SELECT seq_emp_empno.NEXTVAL FROM dual;--伪表
	SELECT seq_emp_empno.CURRVAL FROM dual;

	使用序列作为emp表主键提供值

3.索引
索引，用于提高查询效率，排序效率等操作。索引可以建立在一张表的单列，也可以建立在多列上。
索引的算法是数据库自行维护，我们无需关注。
当我们进行查询或者排序时，数据库会自动使用可用的索引。
	CREATE INDEX idx_emp_ename ON emp_zyl( ename);----建立单子段的索引

	CREATE INDEX idx_emp_job_sal ON emp_zyl(job,sal);
	SELECT empno,ename,job,sal FROM emp_zyl ORDER BY job,sal;

	CREATE INDEX emp_ename_upper_idx ON emp_zyl(UPPER(ename));
	SELECT *FROM emp_zyl WHERE UPPER(ename)='KING';

4.约束
4.1非空约束
可以在建表之后，通过修改表的定义，添加非空约束：

CREATE TABLE employees(eid NUMBER(6),name VARCHAR2(30) NOT NULL,salary NUMBER(7,2),hiredate DATE CONSTRAINT employees_hiredate_nn NOT NULL);
DESC employees;
ALTER TABLE employees MODIFY(eid NUMBER(6) NOT NULL);----添加非空约束，在修改表结构的同时

ALTER TABLE employees MODIFY (eid NUMBER(6) NULL);


4.2）唯一性约束
	CREATE TABLE employees1(
		eid NUMBER(6) UNIQUE,
                name VARCHAR2(30) ,
		email VARCHAR2(50),
		salary NUMBER(7,2),
		hiredate DATE,
                        CONSTRAINT employees1_email_uk UNIQUE(email)
		);

	ALTER TABLE employees1 ADD CONSTRAINT employees1_name_uk UNIQUE(name);	
	----可以在表建立好之后再添加唯一性约束

4.3)主键约束
	
	CREATE TABLE employees2(
		eid NUMBER(6) PRIMARY KEY, name VARCHAR2(30),email VARCHAR2 (50),
		salary NUMBER(7,2),hiredate DATE);
	
	ALTER TABLE employees3 ADD CONSTRAINT employees3_eid_pk PRIMARY KEY (eid)
	
主键可以使用序列作为值的提供方式，还有一种常见的是UUID，是一个32位不重复字符串。所以若使用UUID ，主键字段应当是字符串类型。Oracle 提供了一个函数可以生成UUID:
	SELECT SYS_GUID() FROM dual;

4.4）外键约束

4.5）检查约束
	























































